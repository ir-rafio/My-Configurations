<snippet>
	<content>
        <![CDATA[
class SegmentTree
{
protected:
    int *tree;
    unsigned Size;
    int (*proc)(int, int);
    int identity;

    void build(const int input[], const unsigned low, const unsigned high, const unsigned root=0)
    {
        if(low==high)
        {
            tree[root]=input[low];
            return;
        }

        unsigned mid=(low+high)/2;
        build(input, low, mid, 2*root+1);
        build(input, mid+1, high, 2*root+2);

        tree[root]=proc(tree[2*root+1], tree[2*root+2]); // Processing
    }

    void build(const vector<int> &input, const unsigned low, const unsigned high, const unsigned root=0)
    {
        if(low==high)
        {
            tree[root]=input[low];
            return;
        }

        unsigned mid=(low+high)/2;
        build(input, low, mid, 2*root+1);
        build(input, mid+1, high, 2*root+2);

        tree[root]=proc(tree[2*root+1], tree[2*root+2]); // Processing
    }

    int query(const unsigned from, const unsigned to, const unsigned low, const unsigned high, const unsigned root) const
    {
        if(low>high) return identity; // Processing
        if(from>high || to<low) return identity; // Processing
        if(from<=low && to>=high) return tree[root];

        unsigned mid=(low+high)/2;
        return proc(query(from, to, low, mid, 2*root+1), query(from, to, mid+1, high, 2*root+2)); // Processing
    }

public:
    SegmentTree(SegmentTree& st): tree(st.tree), Size(st.Size), proc(st.proc), identity(st.identity)
    {}

    SegmentTree(int (*funcptr)(int, int), int iden, const int input[], const unsigned arraysize): Size(arraysize), proc(funcptr), identity(iden)
    {
        if(Size>1) tree=new int[4*Size-5];
        else tree=new int[1];

        build(input, 0, Size-1);
    }

    SegmentTree(int (*funcptr)(int, int), int iden, const vector<int> &input): Size(input.size()), proc(funcptr), identity(iden)
    {
        if(Size>1) tree=new int[4*Size-5];
        else tree=new int[1];

        build(input, 0, Size-1);
    }

    int query(unsigned from, unsigned to) const
    {
        if(from>to || to>Size) return identity; // Processing
        return query(from, to, 0, Size-1, 0);
    }

    ~SegmentTree()
    {
        delete[] tree;
    }
};

int min(int a, int b)
{
    return a<b? a:b;
}

class SegmentTreeMin: public SegmentTree
{
public:
    SegmentTreeMin(const int input[], const unsigned arraysize): SegmentTree(min, INT_MAX, input, arraysize)
    {}

    SegmentTreeMin(const vector<int> &input): SegmentTree(min, INT_MAX, input)
    {}
};

int max(int a, int b)
{
    return a>b? a: b;
}

class SegmentTreeMax: public SegmentTree
{
public:
    SegmentTreeMax(const int input[], const unsigned arraysize): SegmentTree(max, INT_MIN, input, arraysize)
    {}

    SegmentTreeMax(const vector<int> &input): SegmentTree(max, INT_MIN, input)
    {}
};

int sum(int a, int b)
{
    return a+b;
}

class SegmentTreeSum: public SegmentTree
{
public:
    SegmentTreeSum(const int input[], const unsigned arraysize): SegmentTree(sum, 0, input, arraysize)
    {}

    SegmentTreeSum(const vector<int> &input): SegmentTree(sum, 0, input)
    {}
};

int mul(int a, int b)
{
    return a*b;
}

class SegmentTreeMul: public SegmentTree
{
public:
    SegmentTreeMul(const int input[], const unsigned arraysize): SegmentTree(mul, 1, input, arraysize)
    {}

    SegmentTreeMul(const vector<int> &input): SegmentTree(mul, 1, input)
    {}
};


]]>
    </content>

	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>

	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
    
</snippet>
